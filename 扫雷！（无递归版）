#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<time.h>
#include<stdlib.h>
#define ROW 9
#define QUEUE 9
#define COUNT 10

void playgame(char m[ROW][QUEUE], char n[ROW][QUEUE], int row, int queue, int x[COUNT], int y[COUNT]);
void Judgegame(char m[ROW][QUEUE], char n[ROW][QUEUE], int row, int queue, int x, int y);
void Initgame(char m[ROW][QUEUE], int row, int queue);
void Printgame(char m[ROW][QUEUE], int row, int queue);
void game();
void mune();
void gamepage();
int Countboom(char m[ROW][QUEUE], int row, int queue);

//有多少个雷
int Countboom(char m[ROW][QUEUE], int row, int queue)
{
	int i, j, c=0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < queue; j++)
		{
			if (m[i][j] == '*')
				c++;
		}
	}
	return c;
}

//判断局势
void Judgegame(char m[ROW][QUEUE], char n[ROW][QUEUE], int row, int queue, int x, int y)
{
	int count=0;
	int i, j;
	for (i = -1; i < 2; i++)
	{
		for (j = -1; j < 2; j++)
		{
			if (m[x + i][y + j] == '*')
			{
				count++;
			}
		}
	}
	n[x][y]= 48+count;
}
//随机设置雷！
void playgame(char m[ROW][QUEUE], char n[ROW][QUEUE], int row, int queue, int x[COUNT], int y[COUNT])
{
	int i, j;
	while (1)
	{
		printf("请输入要扫的目标");
		scanf("%d%d", &i, &j);
		if (m[i-1][j-1] == '*')
		{
			printf("您踩到了雷，您死了\n");
			break;
		}
		else if(n[i-1][j-1] == '0')
		{
			printf("此点您已经下过，请从新输入：");
		}
		else
		{
			Judgegame(m,n,ROW,QUEUE,i-1,j-1);
		}
		Printgame(n, ROW, QUEUE);
	}
}
//建立一个扫雷表
void Initgame(char m[ROW][QUEUE], int row, int queue)
{
	int i;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < queue; j++)
		{
			m[i][j] = ' ';
		}
	}
}

//输出扫雷表
void Printgame(char m[ROW][QUEUE], int row, int queue)
{
	int i, j;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < queue; j++)
		{
			printf(" %c ", m[i][j]);
			if (j < queue - 1)
				printf("|");
		}
		printf("\n");
		for (j = 0; j < queue; j++)
		{
			if (i < row - 1)
				printf("——");
		}
		printf("\n");
	}
}

//游戏内容
void game()
{
	int i,c;
	int x[10] = { 0 };
	int y[10] = { 0 };
	char m[ROW][QUEUE] = { 0 };
	char n[ROW][QUEUE] = { 0 };
	Initgame(n, ROW, QUEUE);
	Initgame(m, ROW, QUEUE);
	for (i = 0; i < COUNT; i++)
	{
		x[i] = rand() % ROW;
		y[i] = rand() % QUEUE;
		m[x[i]][y[i]] = '*';
	}
	c = Countboom(m, ROW, QUEUE);
	printf("一共有%d个雷\n", c);
	Printgame(m, ROW, QUEUE);
	playgame(m, n, ROW, QUEUE, x, y);
}

//菜单
void mune()
{
	printf("###############################\n");
	printf("1，玩一局扫雷       0，退出游戏\n");
	printf("###############################\n");
}

//游戏页面
void gamepage()
{
	int i;
	do
	{
		mune();
		printf("请输入数字");
		scanf("%d", &i);
		switch(i)
		{
		case 1:game(); break;
		case 0:printf("欢迎下次光临~~\n"); break;
		default:printf("请重新输入！\n");
		}
	} while (i);
}

int main()
{
	srand((unsigned int)time(NULL));
	gamepage();
	return 0;
}
